/*
Time complexity O(nLogN) ən pis halda O(n^2) ola bilər buda belə münkün ola bilərki hər dəfə seçilən pivot ən böyük və ya ən kiçik olsun.(Ən böyük və ya ən kiçik olanda array blanaslı şəkildə bölünə bilmir )
Space Complexity O(logn) olacaq bu bir rekursiv alqoritimdir və digər rekursiv alqoritmlərdəd olduğu kimi dərinliyindən aslıdır,Hər bir rekursiya işlədikdə yaddaş tələb olunacaq.
Ən pis halda Space Complexity O(N) ola bilər.

Aşağıda sıra ilə ən efektivdən ən yavaşa doğu yazilib.
O(1): Constant complexity. -ən yaxşı
O(logn): Logarithmic complexity. - yaxşı 
O(n): Linear complexity. - normal
O(nlogn): Loglinear complexity. -çoxda pis deyil
O(n^x): Polynomial complexity. - pis 
O(X^n): Exponential time. -dahada pis 
O(n!): Factorial complexity.  - bərbad 


Alqoritm belə işləyirki birinci sağdakı elemeti pivot seçir ona əsaən müaqisəyə başlayır.Seçilən pivotdan balacaları  özündən sola böyükləri  isə özündən sağa yığır.
yəni [1 , 4, 5, 12 ,14, 11 , 6] listini belə sıralıyır [1 , 4, 5, 6 , 12 , 14 , 11](burada pivotun yerini təyin etdik 3 cü indeksi element )  partition methodunun işi tam olaraq budur. 
6 elemetinin yeri müyəyən oldu artiq ona baxmırıq
Sonra isə quickSort methodu işləyir bu halda isə 
iki dəfə alqoritm rekursiv şəklildə işləyir 
1) ƏN SOLDAN PİVOTA QƏDƏR -[1 , 4, 5 ]   
2) PIVOTDAN ƏN SAĞA QƏDƏR -[12 , 14 , 11] 
                           [12 , 11 , 14] buradada pivotun yerini tapdıq.
                           [12 , 14]

                           nəticədə ilk pivot bəlli idi 6(3 cü indekdə )
                           [1 , 4 , 5 ,6,11 , 12 , 14 ] olaraq listi sıraladıq.

Bu aloritmdədə yanaşma (Divide and Conquer)-dir.

Pivot seçimini right indeksindəki element olaraq  təyin etmişəm amma təsadüfi pivot seçimidə istifadə edilə bilər.
*/

class QuickSort {
  void quickSort(List<int> numbers, int left, int right) {
    if (left < right) {
      int pivotIndex = partition(numbers, left, right);
      quickSort(numbers, left, pivotIndex - 1); // ƏN SOLDAN PİVOTA QƏDƏR
      quickSort(numbers, pivotIndex + 1, right); // PIVOTDAN ƏN SAĞA QƏDƏR
    }
  }

  int partition(List<int> numbers, int left, int right) {
    int i = left - 1;
    int pivot = numbers[right];
    for (int j = left; j < right; j++) {
      if (numbers[j] <= pivot) {
        i++;
        swap(numbers, i, j);
      }
    }
    swap(numbers, i + 1, right);
    return i + 1;
  }

  void swap(List<int> numbers, int i, int j) {
    int temp = numbers[i];
    numbers[i] = numbers[j];
    numbers[j] = temp;
  }
}

void main() {
  QuickSort QSort = QuickSort();
  List<int> numbers = [10, 7, 8, 9, 1, 5, -1, 4, 5, 2, 2323, 5];
  print('NORMAL LİST: $numbers');
  QSort.quickSort(numbers, 0, numbers.length - 1);
  print(
      'SIRALANMIŞ LİST: $numbers'); //[-1, 1, 2, 4, 5, 5, 5, 7, 8, 9, 10, 2323]
}


/*
təsadüfi pivot seçimi ilə quick sort.

performans olaraq daha yaxşıdır ancaq balaca listlərdə məncə təsadüfi olduğuna görə effektivliyi azalır.

1-50000 arasındakı ədədləri siralamaq kimi bir tapşırığımız varsa quick sortla(standart halda yəni ən sağdaki pivot olsa) Stack overflow xətası alınacaq.
təsadüfi pivot isə 160 ms falan kimi bir müddətdə bu işi görə biləcək. 
məncə  təsadufi pivot ilə quick sortda performansı artırmaq üçün biz  balaca listləri təsadüfi formda yox normal şəkildə sıralaq olar

import 'dart:math';

class Solution {
  List<int> sortArray(List<int> nums) {
    void swap(List<int> nums, int i, int j) {
      int temp = nums[j];
      nums[j] = nums[i];
      nums[i] = temp;
    }

    int partition(List<int> nums, int left, int right) {
      int pivotIndex = left + Random().nextInt(right - left + 1);
      int pivot = nums[pivotIndex];
      swap(nums, pivotIndex, right); // Pivotu sağa dəyiş

      int i = left - 1;
      for (int j = left; j < right; j++) {
        if (nums[j] <= pivot) {
          i++;
          swap(nums, i, j);
        }
      }
      swap(nums, i + 1, right);
      return i + 1;
    }

    void quickSort(List<int> nums, int left, int right) {
      while (left < right) {
        int pivotIndex = partition(nums, left, right);
        if (pivotIndex - left < right - pivotIndex) {
          quickSort(nums, left, pivotIndex - 1);
          left = pivotIndex + 1;
        } else {
          quickSort(nums, pivotIndex + 1, right);
          right = pivotIndex - 1;
        }
      }
    }

    quickSort(nums, 0, nums.length - 1);

    return nums;
  }
}

void main() {
  Solution QSort = Solution();

  List<int> nums = [110, 100, 0];
  var start = DateTime.now();

  QSort.sortArray(nums);
  print('SIRALANMIŞ LİST: $nums'); //[-1, 1, 2, 4, 5, 5, 5, 7, 8, 9, 10, 2323]
  var end = DateTime.now();
  var duration = end.difference(start);
  print('Kodun işləmə müddəti: ${duration.inMilliseconds} millisaniyə');
}


*/
